(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{376:function(v,t,a){"use strict";a.r(t);var e=a(41),r=Object(e.a)({},(function(){var v=this,t=v.$createElement,a=v._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h3",{attrs:{id:"变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[v._v("#")]),v._v(" 变量声明")]),v._v(" "),a("p",[a("code",[v._v("let")]),v._v("和"),a("code",[v._v("const")]),v._v("是JavaScript里相对较新的变量声明方式，像我们之前提到过的，"),a("code",[v._v("let")]),v._v("在很多方面与"),a("code",[v._v("var")]),v._v("是相似的，但是可以帮助大家避免在Javascript里常见一些问题。"),a("code",[v._v("const")]),v._v("是对"),a("code",[v._v("let")]),v._v("的一个增强，他能阻止对一个变量再次赋值。\n因为typescript是JavaScript的超集，所以它本身支持"),a("code",[v._v("let")]),v._v("和"),a("code",[v._v("const")]),v._v("。下面我们会详细说明这些新的声明方式以及为啥推荐使用他们来代替"),a("code",[v._v("var")]),v._v("。\n如果你之前使用JavaScript时没有特别在意。那么这节内容会唤起你的回忆，如果你对"),a("code",[v._v("var")]),v._v("声明的怪异之处了如执掌，那么你可以轻松地略过这节。")]),v._v(" "),a("h3",{attrs:{id:"var声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var声明"}},[v._v("#")]),v._v(" "),a("code",[v._v("var")]),v._v("声明")]),v._v(" "),a("p",[v._v("一直以来我们都是通过"),a("code",[v._v("var")]),v._v("关键字定义javascript变量。\n"),a("code",[v._v("var a = 10;")]),v._v("\n大家都能理解，这里定义了一个名为a值为10的变量")]),v._v(" "),a("h3",{attrs:{id:"作用域与变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域与变量提升"}},[v._v("#")]),v._v(" 作用域与变量提升")]),v._v(" "),a("p",[v._v("略。。。。")])])}),[],!1,null,null,null);t.default=r.exports}}]);