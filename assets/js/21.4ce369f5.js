(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{380:function(e,s,a){"use strict";a.r(s);var n=a(41),t=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"基础类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础类型"}},[e._v("#")]),e._v(" 基础类型")]),e._v(" "),a("h3",{attrs:{id:"布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[e._v("#")]),e._v(" 布尔值")]),e._v(" "),a("ul",[a("li",[e._v("最基本的数据类型就是简单的true/false值，在Javascript和TypeScript里叫做boolean(其它语言中也一样)")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let isDone:boolean = false;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字"}},[e._v("#")]),e._v(" 数字")]),e._v(" "),a("p",[e._v("和Javascript一样，TypeScript里的所有数字都是浮点数。这些浮点数的类型是"),a("code",[e._v("number")]),e._v(".除了支持氏进制和十六进制字面量，TypeScript还支持ECMAScript 2015中引入的二进制和八进制字面量。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let decLiteral:number = 6;\nlet hexLiteral:number = 0xf00d;\nlet binaryLiteral:number = 0b1010;\nlet octalLiteral:number = 0o744;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h3",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[e._v("#")]),e._v(" 字符串")]),e._v(" "),a("ul",[a("li",[e._v("javascript程序的另一项基本操作是处理网页或者服务端的文本数据。像其它语言里一样。我们使用"),a("code",[e._v("string")]),e._v("表示文本数据类型。和JavaScript一样，可以使用双引号（“）或单引号(')表示字符串。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let name:string = "bob"\nname = "smith"\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("ul",[a("li",[e._v("你还可以使用模板字符串，它可以定义多行文本和内嵌表达式。这种字符串是被反引号包围(')，并且以"),a("code",[e._v("${expr}这种形式嵌入表达式")])])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let name:string = 'Gene';\nlet age:number=37;\nlet sentence:string = `Hello,my name is ${name}`\nI'll be ${ age + 1} years old next month\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h3",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[e._v("#")]),e._v(" 数组")]),e._v(" "),a("ul",[a("li",[e._v("TypeScript像Javascript一样可以操作数组元素。有两种方式可以定义数组。第一种，可以在元素类型后面接上"),a("code",[e._v("[]")]),e._v("，表示由此类型元素组成的一个数组:")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let list:number[] = [1,2,3];\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("ul",[a("li",[e._v("第二种方式是使用数组泛型，"),a("code",[e._v("Array<元素类型>")])])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let list:Array<number>= [1,2,3]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"元组tupe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元组tupe"}},[e._v("#")]),e._v(" 元组Tupe")]),e._v(" "),a("p",[e._v("元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。比如，你可以定义一对值分别为"),a("code",[e._v("string")]),e._v("和"),a("code",[e._v("number")]),e._v("类型的元组。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Declare a tuple type\nlet x:[string,number];\n//Initialize it\nx= ['hello',10];//OK\n//Initialize it incorrectly\nx = [10,'hello'];//Error\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("ul",[a("li",[e._v("当访问一个已知索引的元素，会得到正确的类型:")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(x[0].substr(1)); //OK\nconsole.log(x[1].substr(1));\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("ul",[a("li",[e._v("当访问一个越界的元素，会使用联合类型替代：")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("x[3] = 'world'; //OK，字符串可以赋值给（string | number） 类型\nconsole.log(x[5].toString()); //OK,'string' 和 'nubmer' 都有toString\nx[6] = true; //Error，布尔不是(string | number)类型\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h2",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[e._v("#")]),e._v(" 枚举")]),e._v(" "),a("p",[a("code",[e._v("enum类型")]),e._v("是对JavaScript标准数据类型的一个补充。像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Color {Red,Green,Blue}\nlet c:Color = Color.Green\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("ul",[a("li",[e._v("默认情况下，从0开始为元素编号，你也可以手动的指定成员的数值，例如，我们将上面的例子改成从"),a("code",[e._v("1")]),e._v("开始编号：")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Color { Red ,Green,Blue}\nlet c:Color = Color.Green;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("默认情况下，从0开始为编号，你也可以手动的指定成员的数值。例如我们将上面的例子改成从"),a("code",[e._v("1")]),e._v("开始编号:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Color = { Red = 1 ,Green ,Blue}\nlet c:Color = Color.Green\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("或者，全部都采用采用手动赋值:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Color { Red = 1,Green}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("枚举类型提供的一个便利是你可以由枚举的值得到他的名字。例如，我们知道数值为2，但是不确定他映射到Color里的那个名字，我们可以查到相应的名字：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Color {Red = 1，Green，Blue}\nlet colorName:string = Color[2];\nconsole.log(colorName); //Green\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h3",{attrs:{id:"any"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#any"}},[e._v("#")]),e._v(" Any")]),e._v(" "),a("p",[e._v("有时候，我们会想要为那些编程阶段还不清楚的变量指定一个类型，这些值可能来自于动态的内容，比如来自用户输入或第三方代码库，这种情况下，我们不希望类型检\n查器对这些值进行检查而是直接让他们通过编译阶段的检查，那么我们可以使用any类型标记这些变量：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let notSure:any =4 ;\nnotSure = 'maybe a string instead';\nnotSure = false;// okay,defintaly a boolean\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("在对现有代码进行改写的时候，"),a("code",[e._v("any")]),e._v("类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查，你可能认为"),a("code",[e._v("object")]),e._v("有相似得作用，就像他在其它语言中那样，但是"),a("code",[e._v("object")]),e._v("类型的变量只是允许你给它赋值-但是却不能够在它上面调用任意的方法，即便它真的有这些方法:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let notSure:any = 4;\nnotSure.ifItExists();//okay,ifItExits might exist at runtime;\nnotSure.toFixed() ;//okay，toFixed exists (but the compiler doesn't check)\nlet prettySure:Object = 4;\nprettySure.toFixed();\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("当你只知道一部分数据类型时，"),a("code",[e._v("any")]),e._v("类似也是有用的，比如，你有一个数组，它包含了不同的类型的数据")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    let list:any[] = [1,true,'free']\n    list[1] =100;\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h3",{attrs:{id:"void"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#void"}},[e._v("#")]),e._v(" Void")]),e._v(" "),a("p",[e._v("某种程度上来说，void类型像是与"),a("code",[e._v("any")]),e._v("类型相反，她表示没有任何类型，当一个函数没有返回值时，你通常会建到其返回值类型是"),a("code",[e._v("void")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function warnUser():void{\n    console.log('this is my warning message');\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("blockquote",[a("p",[e._v("声明一个"),a("code",[e._v("void")]),e._v("类型的变量没有什么大用，因为你只能为它赋予"),a("code",[e._v("undefined")]),e._v("和"),a("code",[e._v("null")]),e._v(":")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let unusable:void  = undefined;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h2",{attrs:{id:"null和undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null和undefined"}},[e._v("#")]),e._v(" Null和Undefined")]),e._v(" "),a("p",[e._v("TypeScript里, "),a("code",[e._v("undefined")]),e._v("和"),a("code",[e._v("null")]),e._v("两者各有自己的类型分别叫做"),a("code",[e._v("undefined")]),e._v("和"),a("code",[e._v("null")]),e._v("。和"),a("code",[e._v("void")]),e._v("相似，它们的本身的类型用处不是很大:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let u:undefined = undefined;\nlet n:null = null;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("默认情况下"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("是所有类型的子类型。就是说你可以把"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("赋值给"),a("code",[e._v("number")]),e._v("类型的变量。\n然而。当你指定了"),a("code",[e._v("--strictNullChecks")]),e._v("标记，"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("只能赋值给"),a("code",[e._v("void")]),e._v("和他们各自。这能避免很多常见的问题，也许在某处你想传入一个"),a("code",[e._v("string")]),e._v("或"),a("code",[e._v("null")]),e._v("或"),a("code",[e._v("undefined")]),e._v("，你可以使用联合类型"),a("code",[e._v("string")]),e._v("| "),a("code",[e._v("null")]),e._v(" | "),a("code",[e._v("undefined")]),e._v(".再次说明，稍后我们会介绍联合类型。")]),e._v(" "),a("blockquote",[a("p",[e._v("注意：我们鼓励尽可能地使用"),a("code",[e._v("--strictNullchecks")]),e._v(",但在本手册里我们假设这个标记是关闭的。")])]),e._v(" "),a("h2",{attrs:{id:"never"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#never"}},[e._v("#")]),e._v(" Never")]),e._v(" "),a("p",[a("code",[e._v("never")]),e._v("类型表示的是那些永不存在的值的类型。例如，"),a("code",[e._v("never")]),e._v("类型是那些总是会抛出异常或根本就不存在就不会返回值的函数表达式或箭头函数表达式的返回值类型；变量也可能是"),a("code",[e._v("never")]),e._v("类型，当他们被永不为真的类型保护所约束时。\n"),a("code",[e._v("never")]),e._v("类型时任何类型的子类型，也可以赋值任何类型；然而，没有类型时"),a("code",[e._v("never")]),e._v("的子类型或可以赋值给"),a("code",[e._v("never")]),e._v("类型(除了"),a("code",[e._v("never")]),e._v("本身之外)。即使"),a("code",[e._v("any")]),e._v("也不可以赋值给"),a("code",[e._v("never")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("//返回never的函数必须存在无法达到的终点\nfunction error (message:string){\n    throw new Error(message);\n}\n//推断的返回值类型为never\nfunction fail(){\n    return errot('Something failed')\n}\n//返回never的函数必须存在无法达到的终点\nfunction infiniteLoop():never{\n    while(true){\n\n    }\n}\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br")])]),a("h3",{attrs:{id:"object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[e._v("#")]),e._v(" Object")]),e._v(" "),a("p",[a("code",[e._v("object")]),e._v("表示非原始类型，也就是除"),a("code",[e._v("number")]),e._v(","),a("code",[e._v("string")]),e._v(","),a("code",[e._v("boolean")]),e._v(", "),a("code",[e._v("symbol")]),e._v(","),a("code",[e._v("null")]),e._v("或"),a("code",[e._v("undefined")]),e._v("之外的类型。使用"),a("code",[e._v("object")]),e._v("类型，就可以更好的表示像"),a("code",[e._v("object.create")]),e._v("这样的API。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("declare function create(o:object | null ):void;\ncreate({prop:0}) //error\ncreate(null); //ok\ncreate(42); //error\ncreate('string'); //error\ncreate(false);//Error\ncreate(undefined)//error\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("h2",{attrs:{id:"类型断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[e._v("#")]),e._v(" 类型断言")]),e._v(" "),a("p",[e._v("有时候你会遇到这样的情况，你会比Typescript更了解某个值的详细信息。通常这会发生你清楚地知道一个实体具体比他现有类型更确切的类型。\n通过类型断言这种方式可以告诉编译器，‘相信我，我知道自己在干啥’类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和结构，他没有运行时的影响，只是在编译阶段起作用，typescript会假设你，程序员，已经进行了必须的检查。\n类型断言有两种形式，其一“尖括号”语法")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let someValue:any = 'this is a string';\nlet strLength:number = (<string>someValue).length\nconsole.log(strLength) //16\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("另一个为as语法：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let someValue:any = 'this is a string';\nlet strLength:nuber =(someValue as string).length;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("两种形式是等价的。至于使用那个大多数情况下是凭个人喜好；然而，当你在Typescript里使用jsx时，只有as语法断言时被允许的。")])])}),[],!1,null,null,null);s.default=t.exports}}]);