(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{369:function(s,n,e){"use strict";e.r(n);var a=e(41),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),e("h3",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),e("p",[s._v("typeScript的核心原则之一是对所具有的结构进行类型检测，他有时被称作'鸭式辩型法'或‘结构性子类型化’。在typescript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。")]),s._v(" "),e("h3",{attrs:{id:"接口初探"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口初探"}},[s._v("#")]),s._v(" 接口初探")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function printLabel (labelledobj:{label:string}){\n    console.log(labelledobj.label);\n}\nlet myobj = {size:10,label:'Size 10 object' }\nprintLabel(myobj);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("blockquote",[e("p",[s._v("重写列子")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('interface LabelledValue {\n  label: string;\n}\n\nfunction printLabel(labelledObj: LabelledValue) {\n  console.log(labelledObj);\n}\n\nlet myObj = {size: 10, label: "Size 10 Object"};\nprintLabel(myObj); //Size 10 Object\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("h3",{attrs:{id:"可选属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可选属性"}},[s._v("#")]),s._v(" 可选属性")]),s._v(" "),e("p",[s._v('接口里的属性不全是必需的，有些是只在某些条件存在，或者根本不存在。可选属性在应用"option bags"模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。')]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("   \ninterface Squareconfig{\n    color?:string;\n    width?:number;\n\n}\nfunction createSquare(config:Squareconfig): {color: string; area: number}{\n    let newSquare = {color:'white',area:100};\n    if(config.color){\n        newSquare.color = config.color;\n    }\n    if(config.width){\n        newSquare.area = config.width * config.width\n    }\n    return newSquare\n}\nlet mySquare = createSquare({color: \"black\"});\nconsole.log(mySquare,'mySquare'); //{ color: 'black', area: 100 } mySquare\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("h3",{attrs:{id:"只读属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#只读属性"}},[s._v("#")]),s._v(" 只读属性")]),s._v(" "),e("blockquote",[e("p",[s._v("一些对象属性只能在对象刚刚创建的时候修改其值。你可以在属性明前用"),e("code",[s._v("readonly")]),s._v("来指定只读属性：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("interface Point {\n    readonly x:number;\n    readonly y:number;\n}\nlet p1:Point = {x:10,y:20};\np1.x = 5;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("blockquote",[e("p",[s._v("TypeScript具有"),e("code",[s._v("ReadonlyArray<T>")]),s._v("类型，它与"),e("code",[s._v("Array<T>")]),s._v("相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改:")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let a:number[] = [1,2,3,4];\nlet ro:ReadonlyArray<number> =a;\nro[0] = 12; //error\nro.push(5);//error\nro.length = 100; //error\n// a= ro;//error\na = ro as number[];\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("blockquote",[e("p",[s._v("上面代码的最后一行，可以看到就算把整个"),e("code",[s._v("ReadonlyArray")]),s._v("赋值到一个普通数组也是不可以的，但是你看可以用类型断言重写：\n"),e("code",[s._v("a = ro as number[]")])])]),s._v(" "),e("h4",{attrs:{id:"readonyvs-const"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readonyvs-const"}},[s._v("#")]),s._v(" "),e("code",[s._v("readony")]),s._v("VS "),e("code",[s._v("const")])]),s._v(" "),e("p",[s._v("最简单判断改用"),e("code",[s._v("readonly")]),s._v("还是"),e("code",[s._v("const")]),s._v("的方法是要把它作为变量使用还是作为一个属性。作为变量使用的话用"),e("code",[s._v("const")]),s._v(",若作为属性使用"),e("code",[s._v("readonly")])]),s._v(" "),e("h3",{attrs:{id:"额外的属性检查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#额外的属性检查"}},[s._v("#")]),s._v(" 额外的属性检查")]),s._v(" "),e("p",[s._v("我们在第一个例子里使用了接口，typeScript让我们传入"),e("code",[s._v("{size:number,label:string}")]),s._v("到仅期望得到"),e("code",[s._v("{label:string}")]),s._v("的函数里。我们已经学过了可选属性，并且知道他们在“option bags”模式里很有用。\n然而。天真地将这两者结合的话就会像JavaScript里那样搬起石头砸其自己的脚，比如，拿"),e("code",[s._v("createSquare")]),s._v("例子来说：")]),s._v(" "),e("h3",{attrs:{id:"继承接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承接口"}},[s._v("#")]),s._v(" 继承接口")]),s._v(" "),e("blockquote",[e("p",[s._v("和类一样，接口也可以相互继承，这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\ninterface Shape {\n    color:string\n}\ninterface Square extends Shape {\n    sideLength:number;\n}\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10\nconsole.log(square,'square');\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("blockquote",[e("p",[s._v("一个接口可以继承多个接口，创建出多个接口的合成接口。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\ninterface Shape {\n    color:string;\n}\ninterface PenStroke {\n    penWidth:number;\n}\ninterface Square extends Shape, PenStroke {\n    sideLength:number;\n}\nlet square =<Square>{};\nsquare.color = 'blue';\nsquare.sideLength = 10;\nsquare.penWidth = 5.0; \nconsole.log(square); //{ color: 'blue', sideLength: 10, penWidth: 5 }\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("h3",{attrs:{id:"混合类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混合类型"}},[s._v("#")]),s._v(" 混合类型")]),s._v(" "),e("blockquote",[e("p",[s._v("先前我们提过，接口能够描述Javascript里丰富的类型，因为JavaScript其动态的特点，有时你会希望一个对象可以同时具有上面提到的多种类型。\n一个例子就是，一个对象可以同时作为函数和对象使用，并带有额外的属性。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("interface Counter {\n    (start:number):string;\n    interval:number;\n    reset():void;\n}\nfunction getCounter():Counter {\n    let counter = <Counter>function(start:number){\n        console.log(start,'start')\n    };\n    counter.interval = 123;\n    counter.reset = function(){\n        console.log('reset');\n    };\n    return counter;\n}\nlet c = getCounter();\nc(10);\nc.reset();\nc.interval = 5.0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("h3",{attrs:{id:"接口继承类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口继承类"}},[s._v("#")]),s._v(" 接口继承类")]),s._v(" "),e("ul",[e("li",[s._v("当接口继承了一个类型时，它会继承类的成员但不包含其实现。就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。接口同样会继承的private和protected成员。这意味这当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其它子类所实现。\n当你有一个庞大的继承结构时这很有用，弹药指出的是你的代码只在子类拥有特定属性时起作用，这个子类除了继承至基类没有任何关系。例：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Control {\n    private state:any;\n}\ninterface SelectableControl extends Control{\n    select():void;\n}\nclass Button extends Control implements SelectableControl{\n    select(){}\n}\nclass TextBox extends Control {\n    select(){};\n}\nclass Image implements SelectableControl{\n    select() {}\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);