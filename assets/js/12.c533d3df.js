(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{377:function(s,n,e){"use strict";e.r(n);var a=e(41),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[s._v("#")]),s._v(" 类")]),s._v(" "),e("blockquote",[e("p",[s._v("demo")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Greeter{\n    greeting:string;\n    constructor(message:string){\n        this.greeting = message;\n    }\n    greet(){\n        return 'hello, ' + this.greeting;\n    }\n}\nlet greeter = new Greeter('world');\nconsole.log(greeter.greet());\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h3",{attrs:{id:"继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[s._v("#")]),s._v(" 继承")]),s._v(" "),e("p",[s._v("在typescript里，我们可以使用常用的面向对象模式，基于类的程序设计中一种最基本的模式时允许使用继承来扩展现有的类。")]),s._v(" "),e("ul",[e("li",[s._v("demo")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// class Animal {\n//     move(distanceInMeters:number =0 ){\n//         console.log( `Animal moved ${distanceInMeters}m`);\n\n//     }\n// }\n// class Dog extends Animal{\n//     bark(){\n//         console.log('woof! woof!');\n//     }\n// }\n// const dog = new Dog();\n// dog.bark();\n// dog.move(10);\n// dog.bark();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("ul",[e("li",[s._v("调用基类的方法")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('class Animal {\n    name:string;\n    constructor(theName:string){ this.name = theName}\n    move(distanceInMeters:number = 0){\n        console.log(`${this.name} moved ${distanceInMeters}m`);\n\n    }\n}\nclass Snake extends Animal{\n    constructor(name:string){ super(name)}\n    move(distanceInMeters = 5){\n        console.log("slithering....");\n        super.move(distanceInMeters)\n    }\n}\nclass Horse extends Animal {\n    constructor(name:string){super(name)}\n    move(distanceInMeters =45){\n        console.log("Galloping....");\n        super.move(distanceInMeters);\n    }\n}\nlet sam = new Snake(\'Sammy the Python\');\nlet tom:Animal = new Horse(" Tommy the Palmoino");\nsam.move();\ntom.move(34)\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])]),e("ul",[e("li",[s._v("这个例子展示了一些上面没有提到的特性，这一次，我们使用extents关键子创建了Animals的两个子类：Horse和Snake")]),s._v(" "),e("li",[s._v("与前一列的不同点时，派生类包含了一个构造函数，他必须调用super(),他会执行基类的构造函数，而且，在构造函数里访问this的属性之前，我们一定调用super（），这个时typescript强制执行的一条重要规则。\n这个例子演示了如何在子类里可以重写父类的方法，snake类和Horse类都创建了move方法，他们重写了从Animal继承来的move方法，使得move方法根据不同的类而具有不同的功能，注意，即使tom被声明为Animal类型，但因为他的值时horse，调用tom.move(34)时，他会调用horse里重写的方法：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Slithering...\nSammy the Python moved 5m.\nGalloping...\nTommy the Palomino moved 34m.\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"公共-私有与受保护的修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#公共-私有与受保护的修饰符"}},[s._v("#")]),s._v(" 公共，私有与受保护的修饰符")]),s._v(" "),e("h4",{attrs:{id:"默认为public"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#默认为public"}},[s._v("#")]),s._v(" 默认为public")]),s._v(" "),e("p",[s._v("在上面的例子里，我们可以自由的访问程序里定义的成员，如果你对其它语言中的类比较了解，就会注意到我们在之前的代码里并没有使用public来做修饰;在TypeScript里，成员都默认是"),e("code",[s._v("public")])]),s._v(" "),e("blockquote",[e("p",[s._v("demo")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" class Animal{\n     public name:string;\n     public constructor(theName:string){this.name = theName}\n     public move(distanceInmeters:number){\n         console.log(`${this.name} moved ${distanceInMeters}m` );\n     }\n }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h4",{attrs:{id:"private"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#private"}},[s._v("#")]),s._v(" private")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Animal {\n    private name:string;\n    constructor(theName:string){this.name = theName}\n}\nnew Animal('Cat').name\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("TypeScript使用的是结构性类型系统，当我们比较两种不同的类型时，并不在乎它们从何而来，如果所有成员的类型都是兼容的，我们就认为他们的类型是兼容。\n然而，当我们比较带有"),e("code",[s._v("private")]),s._v("或"),e("code",[s._v("protected")]),s._v("成员的类型的时候，情况就不同了，如果其中一个类型里包含一个private成员，那么只有当另外一个类型也存在这样一个private成员，并且他们都是来自同一处声明时，我们才认为这两个类型是兼容的，对于protected成员也使用这个规则。")]),s._v(" "),e("blockquote",[e("p",[s._v("demo")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Animal {\n    private name:string;\n    constructor(theName:string){this.name = theName}\n\n}\nclass Rhino extends Animal {\n    constructor(){super('Rhino')}\n}\nclass Employee {\n    private name:string;\n    constructor(theName:string){this.name = theName}\n}\nlet animal = new Animal('Goat')\nlet rhino = new Rhino();\nlet employee = new Employee('Bob'); \nanimal = rhino;\n// animal = employee\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("这个例子中Animal和Rhino两个类，Rhino是Animal类的子类，还有一个Employee类，其类型看上去与Animal是相同的，我们创建了几个这些类的实例，并相互赋值来看看会发生什么，因为Animal和Rhino共享了来自Animal里的私有成员定义private name:string,因此他们是兼容的，然而Employee却不是这样。当把Employee赋值给Animal的时候，得到一个错误，说他们的类型不兼容，尽管Employ里也有一个私有成员name，但它明显不是Animal里面定义的那个。")]),s._v(" "),e("h4",{attrs:{id:"protected"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#protected"}},[s._v("#")]),s._v(" protected")]),s._v(" "),e("p",[s._v("protected修饰符与private修饰符的行为很相似，但有一点不同，protected成员在派生类中任然可以访问")]),s._v(" "),e("blockquote",[e("p",[s._v("example")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('class Person {\n    protected name:string;\n    constructor(name:string){ this.name = name}\n}\nclass Employee extends Person{\n    private department:string;\n    constructor(name:string,department:string){\n        super(name)\n        this.department = department\n    }\n    public getElevatorPitch(){\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\nlet howard = new Employee("Howard", "Sales");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.name); // 错误\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("注意，我们不能在Person类外使用name，但是任然可以通过Employee类的实例方法访问，因为Employee是由person派生而来的")]),s._v(" "),e("blockquote",[e("p",[s._v("构造函数也可以被标记成protected，这意味着这个类不能在包含它的实例化，但是能被继承")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('class Person {\n    protected name:string;\n    protected constructor(theName:string){ this.name = theName}\n\n}\nclass Employee extends Person{\n    private department:string;\n    constructor(name:string,department:string){\n        super(name);\n        this.department = department;\n    }\n    public getElevatorPitch(){\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\nlet howard = new Employee("Howard", "Sales");\nlet john = new Person("John"); // 错误: \'Person\' 的构造函数是被保护的.\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("h3",{attrs:{id:"readonly修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readonly修饰符"}},[s._v("#")]),s._v(" readonly修饰符")]),s._v(" "),e("p",[s._v("你可以使用readonly关键字将属性设置为只读的，只读属性必须声明时或构造函数被初始化")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Octopus{\n    readonly name:string;\n    readonly numberOfLegs:number = 8;\n    constructor(theName:string){\n        this.name = theName\n    }\n}\nlet dad = new Octopus('Man with the 8 strong legs')\ndad.name = 'man with the 3-piece suit'\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h3",{attrs:{id:"存取器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存取器"}},[s._v("#")]),s._v(" 存取器")]),s._v(" "),e("p",[s._v("TypeScript支持通过getters/setters来截取对对象成员的访问，他能帮助你有效的控制对对象成员的访问")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Employee {\n    fullName:string\n}\nlet employee = new Employee();\nemployee.fullName = 'Bob Smith'\nif(employee.fullName){\n    console.log(employee.fullName);\n\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);